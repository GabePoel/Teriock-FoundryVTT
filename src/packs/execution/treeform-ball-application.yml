name: Treeform Ball - Application
type: script
_id: S0lpUCEi8F1xp6h4
author: teriockBuilder00
img: icons/svg/dice-target.svg
scope: global
command: |-
  if (!actor.effectKeys.consequence.has("treeformBallEffect")) {
    const hp = actor.system.hp.value;
    if (!actor.itemKeys.species.has("tree")) {
      const treeSpecies = await tm.fetch.getItem(
        "Tree",
        "species",
        {
          clone: true,
        },
      );
      const created = await actor.createEmbeddedDocuments("Item", [treeSpecies]);
      const createdTree = created[0];
      await createdTree.update({
        "system.size.value": actor.system.size,
        "system.applyMp": false,
      });
    }
    const notTree = actor.species.filter((s) => s.name !== "Tree");
    for (const i of [...notTree, ...actor.ranks]) {
      await i.setFlag("teriock", "preTreeformApplyHp", i.system.applyHp);
      await i.setFlag("teriock", "preTreeformDisabled", i.disabled);
    }
    const disabledSpeciesArray = notTree.map((s) => {
      return {
        _id: s.id,
        "system.applyHp": false,
        "system.disabled": true,
      };
    });
    const disabledRanksArray = actor.ranks.map((r) => {
      return {
        _id: r.id,
        "system.applyHp": false,
        "system.disabled": true,
      };
    });
    const itemsToDisable = [...disabledSpeciesArray, ...disabledRanksArray];
    await actor.updateEmbeddedDocuments("Item", itemsToDisable);
    await actor.setFlag("teriock", "preTransformHp", hp);
    await actor.update({ "system.hp.value": actor.system.hp.max });
  }
folder: null
ownership:
  default: 0
flags: {}
_stats:
  coreVersion: '13.345'
  systemId: teriock
  systemVersion: 0.1.0
  lastModifiedBy: teriockBuilder00
_key: '!macros!S0lpUCEi8F1xp6h4'
