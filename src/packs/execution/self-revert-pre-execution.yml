name: Self Revert - Pre-execution
type: script
_id: dc0XWbqZgw04rJn5
author: teriockBuilder00
img: icons/svg/dice-target.svg
scope: global
command: |-
  const data = /** @type {Teriock.HookData.UseAbility} */ scope.data;
  const transformationLevels = {
    minor: "Minor Transformation",
    full: "Full Transformation",
    greater: "Greater Transformation",
  };
  const chosenTransformationLevel = await tm.dialogs.selectDialog(
    transformationLevels,
    {
      label: "Level",
      hint: "If known, select the level of transformation you are attempting to revert from.",
      hintHtml: TERIOCK.content.conditionsData.transformed.content,
      hintTitle: "Transformed",
      title: "Select Transformation Level",
      other: true,
      initial: "minor",
    },
  );
  let dc = "none";
  if (chosenTransformationLevel === "minor") dc = 6;
  if (chosenTransformationLevel === "full") dc = 12;
  if (chosenTransformationLevel === "greater") dc = 18;
  const buttons = data.rollConfig.chatData.system.buttons.filter(
    (b) => b.dataset?.action === "feat-save" && b.dataset?.attribute === "int",
  );
  for (const b of buttons) {
    b.dataset.dc = dc;
  }
  for (let i = 0; i < data.rollConfig.chatData.rolls.length; i++) {
    const r = data.rollConfig.chatData.rolls[i];
    if (r.context?.diceClass === "feat") {
      if (typeof dc === "number") {
        const newRoll = new game.teriock.Roll(
          `${dc}`,
          {},
          {
            flavor: transformationLevels[chosenTransformationLevel] + " DC",
            context: {
              diceClass: "feat",
              totalClass: "feat",
            },
          },
        );
        await newRoll.evaluate();
        data.rollConfig.chatData.rolls[i] = newRoll;
      } else {
        data.rollConfig.chatData.rolls.pop();
      }
    }
  }
folder: null
ownership:
  default: 0
flags: {}
_stats:
  coreVersion: '13'
  systemId: teriock
  systemVersion: 0.1.0
  lastModifiedBy: teriockBuilder00
_key: '!macros!dc0XWbqZgw04rJn5'
