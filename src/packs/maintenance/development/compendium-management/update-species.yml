folder: EjZWrvZOxrEdrJfe
name: Update Species
type: script
_id: U0WfGPoPSLSystNU
author: teriockBuilder00
img: systems/teriock/src/icons/documents/species.svg
scope: global
command: >-
  const speciesPack = game.teriock.packs.species();

  const speciesFolders = speciesPack.folders;


  const allSpeciesFolderName = "Monster Species";

  const characterSpeciesFolderName = "Character Species";

  const commonAnimalSpeciesFolderName = "Common Animal Species";

  const undeadSpeciesFolderName = "Undead Species";

  let allSpeciesFolder = speciesFolders.getName(allSpeciesFolderName);

  let characterSpeciesFolder =
  speciesFolders.getName(characterSpeciesFolderName);

  let commonAnimalSpeciesFolder = speciesFolders.getName(
    commonAnimalSpeciesFolderName,
  );

  let undeadSpeciesFolder = speciesFolders.getName(undeadSpeciesFolderName);

  if (!allSpeciesFolder) {
    await Folder.create(
      {
        name: allSpeciesFolderName,
        type: "Item",
      },
      {
        pack: "teriock.species",
      },
    );
  }

  if (!characterSpeciesFolder) {
    await Folder.create(
      {
        name: characterSpeciesFolderName,
        type: "Item",
      },
      {
        pack: "teriock.species",
      },
    );
  }

  if (!commonAnimalSpeciesFolder) {
    await Folder.create(
      {
        name: commonAnimalSpeciesFolderName,
        type: "Item",
      },
      {
        pack: "teriock.species",
      },
    );
  }

  if (!undeadSpeciesFolder) {
    await Folder.create(
      {
        name: undeadSpeciesFolderName,
        type: "Item",
      },
      {
        pack: "teriock.species",
      },
    );
  }


  const progress = ui.notifications.info("Pulling all creatures from wiki.", {
    progress: true,
  });


  async function processSpecies(speciesName, _index, _total) {
    let speciesItem = speciesPack.index.find((e) => e.name === speciesName);
    let folder = allSpeciesFolder;
    if (Object.values(TERIOCK.index.humanoids).includes(speciesName)) {
      folder = characterSpeciesFolder;
    }
    if (Object.values(TERIOCK.index.commonAnimals).includes(speciesName)) {
      folder = commonAnimalSpeciesFolder;
    }
    if (Object.values(TERIOCK.index.undead).includes(speciesName)) {
      folder = undeadSpeciesFolder;
    }
    if (!speciesItem) {
      speciesItem = /** @type {TeriockSpecies} */ await Item.create(
        {
          name: speciesName,
          type: "species",
          folder: folder.id,
        },
        { pack: "teriock.species" },
      );
    } else {
      speciesItem = /** @type {TeriockSpecies} */ await foundry.utils.fromUuid(
        speciesItem.uuid,
      );
    }

    await speciesItem.system.wikiPull({ notify: false });
    const knownAbilities = [];
    const supAbilities = speciesItem.abilities.filter((a) => !a.sup);
    for (const a of supAbilities) {
      if (knownAbilities.includes(a.name)) {
        await a.delete();
      } else {
        knownAbilities.push(a.name);
      }
    }

    return {
      speciesName,
      success: true,
    };
  }


  const speciesPromises = Object.values(TERIOCK.index.creatures).map(
    (speciesName, index) =>
      processSpecies(
        speciesName,
        index,
        Object.values(TERIOCK.index.creatures).length,
      ),
  );


  progress.update({
    pct: 0.1,
    message: `Processing ${Object.values(TERIOCK.index.creatures).length} species in parallel...`,
  });


  try {
    const results = await Promise.all(speciesPromises);

    progress.update({
      pct: 1,
      message: `Successfully processed ${results.length} species.`,
    });

    console.log(
      `Completed processing ${results.length} species:`,
      results.map((r) => r.speciesName),
    );
  } catch (error) {
    progress.update({
      pct: 1,
      message: `Error occurred during processing: ${error.message}`,
    });
    console.error("Error processing species:", error);
  }
ownership:
  default: 0
flags: {}
_stats:
  coreVersion: '13'
  systemId: teriock
  systemVersion: 0.1.0
  lastModifiedBy: teriockBuilder00
_key: '!macros!U0WfGPoPSLSystNU'
