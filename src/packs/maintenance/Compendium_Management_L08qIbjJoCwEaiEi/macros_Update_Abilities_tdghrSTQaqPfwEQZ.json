{
  "name": "Update Abilities",
  "type": "script",
  "_id": "tdghrSTQaqPfwEQZ",
  "author": "IIjfAJm5Tf1B6G7t",
  "img": "systems/teriock/assets/ability.svg",
  "scope": "global",
  "command": "const abilitiesPack = game.teriock.packs.abilities();\n\nconst progress = ui.notifications.info(`Pulling all abilities from wiki.`, {\n  progress: true,\n});\n\nlet allAbilityPages =\n  await game.teriock.api.wiki.fetchCategoryMembers(\"Abilities\");\nallAbilityPages = allAbilityPages.filter((page) =>\n  page.title.includes(\"Ability:\"),\n);\n\nasync function processAbility(abilityPage, _index, _total) {\n  const abilityName = abilityPage.title.split(\"Ability:\")[1];\n\n  let abilityItem = abilitiesPack.index.find((e) => e.name === abilityName);\n  if (!abilityItem) {\n    abilityItem = await game.teriock.Item.create(\n      {\n        name: abilityName,\n        type: \"wrapper\",\n      },\n      { pack: \"teriock.abilities\" },\n    );\n  } else {\n    abilityItem = await foundry.utils.fromUuid(abilityItem.uuid);\n  }\n  let abilityEffect = abilityItem.abilities.find((a) => a.name === abilityName);\n\n  if (!abilityEffect) {\n    abilityEffect = await game.teriock.api.create.ability(\n      abilityItem,\n      abilityName,\n      { notify: false },\n    );\n  } else {\n    await abilityEffect.system.wikiPull({ notify: false });\n  }\n\n  if (abilityItem.img !== abilityEffect.img) {\n    await abilityItem.update({ img: abilityEffect.img });\n  }\n\n  return { abilityName, success: true };\n}\n\nconst BATCH_SIZE = 50;\nconst total = allAbilityPages.length;\nconst results = [];\n\nprogress.update({\n  pct: 0.1,\n  message: `Processing ${total} abilities in batches of ${BATCH_SIZE}...`,\n});\n\ntry {\n  for (let start = 0; start < total; start += BATCH_SIZE) {\n    const batch = allAbilityPages.slice(start, start + BATCH_SIZE);\n\n    const batchPromises = batch.map((abilityPage, i) =>\n      processAbility(abilityPage, start + i, total),\n    );\n\n    const batchResults = await Promise.all(batchPromises);\n    results.push(...batchResults);\n\n    const processed = Math.min(start + batch.length, total);\n    const pct = 0.1 + 0.9 * (processed / total);\n\n    progress.update({\n      pct: Math.min(pct, 1),\n      message: `Processed ${processed}/${total} abilities (batch ${Math.floor(start / BATCH_SIZE) + 1}/${Math.ceil(total / BATCH_SIZE)}).`,\n    });\n  }\n\n  progress.update({\n    pct: 1,\n    message: `Successfully processed ${results.length} abilities.`,\n  });\n\n  console.log(\n    `Completed processing ${results.length} abilities:`,\n    results.map((r) => r.abilityName),\n  );\n} catch (error) {\n  progress.update({\n    pct: 1,\n    message: `Error occurred during processing: ${error.message}`,\n  });\n  console.error(\"Error processing abilities:\", error);\n}",
  "folder": "L08qIbjJoCwEaiEi",
  "sort": 200000,
  "ownership": {
    "default": 0,
    "IIjfAJm5Tf1B6G7t": 3
  },
  "flags": {},
  "_stats": {
    "compendiumSource": null,
    "duplicateSource": null,
    "exportSource": null,
    "coreVersion": "13.345",
    "systemId": "teriock",
    "systemVersion": "0.1.0",
    "createdTime": 1753144516198,
    "modifiedTime": 1756341010645,
    "lastModifiedBy": "qf5JYGZKzM588nE6"
  },
  "_key": "!macros!tdghrSTQaqPfwEQZ"
}
