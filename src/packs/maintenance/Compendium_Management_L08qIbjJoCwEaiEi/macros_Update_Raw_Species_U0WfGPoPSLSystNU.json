{
  "folder": "L08qIbjJoCwEaiEi",
  "name": "Update Raw Species",
  "type": "script",
  "_id": "U0WfGPoPSLSystNU",
  "author": "qf5JYGZKzM588nE6",
  "img": "systems/teriock/assets/species.svg",
  "scope": "global",
  "command": "const speciesPack = game.teriock.packs.species();\nconst speciesFolders = speciesPack.folders;\n\nconst allSpeciesFolderName = \"All Species\";\nlet allSpeciesFolder = speciesFolders.getName(allSpeciesFolderName);\nif (!allSpeciesFolder) {\n  await Folder.create(\n    {\n      name: allSpeciesFolderName,\n      type: \"Item\",\n    },\n    {\n      pack: \"teriock.species\",\n    },\n  );\n}\n\nconst progress = ui.notifications.info(\"Pulling all creatures from wiki.\", {\n  progress: true,\n});\n\nlet allSpeciesPages =\n  await game.teriock.api.wiki.fetchCategoryMembers(\"Creatures\");\nallSpeciesPages = allSpeciesPages.filter((page) =>\n  page.title.includes(\"Creature:\"),\n);\n\n// Function to process a single species\nasync function processSpecies(speciesPage, index, total) {\n  const speciesName = speciesPage.title.split(\"Creature:\")[1];\n\n  let speciesItem = speciesPack.index.find((e) => e.name === speciesName);\n  if (!speciesItem) {\n    speciesItem = await game.teriock.Item.create(\n      {\n        name: speciesName,\n        type: \"species\",\n        folder: allSpeciesFolder.id,\n      },\n      { pack: \"teriock.species\" },\n    );\n  } else {\n    speciesItem = await foundry.utils.fromUuid(speciesItem.uuid);\n  }\n  \n  await speciesItem.system.wikiPull({ notify: false });\n\n  return { speciesName, success: true };\n}\n\n// Create array of promises for parallel processing\nconst speciesPromises = allSpeciesPages.map((speciesPage, index) => \n  processSpecies(speciesPage, index, allSpeciesPages.length)\n);\n\n// Update progress to show processing has started\nprogress.update({ \n  pct: 0.1, \n  message: `Processing ${allSpeciesPages.length} species in parallel...` \n});\n\n// Execute all species processing in parallel\ntry {\n  const results = await Promise.all(speciesPromises);\n  \n  // Update progress to completion\n  progress.update({ \n    pct: 1, \n    message: `Successfully processed ${results.length} species.` \n  });\n  \n  console.log(`Completed processing ${results.length} species:`, \n    results.map(r => r.speciesName));\n    \n} catch (error) {\n  progress.update({ \n    pct: 1, \n    message: `Error occurred during processing: ${error.message}` \n  });\n  console.error(\"Error processing species:\", error);\n}",
  "sort": 0,
  "ownership": {
    "default": 0,
    "qf5JYGZKzM588nE6": 3
  },
  "flags": {},
  "_stats": {
    "compendiumSource": null,
    "duplicateSource": null,
    "exportSource": null,
    "coreVersion": "13.345",
    "systemId": "teriock",
    "systemVersion": "0.1.0",
    "createdTime": 1755506076847,
    "modifiedTime": 1755751296593,
    "lastModifiedBy": "qf5JYGZKzM588nE6"
  },
  "_key": "!macros!U0WfGPoPSLSystNU"
}
