{
  "name": "Update Equipment",
  "type": "script",
  "_id": "NccvZMMNyFS0braS",
  "author": "IIjfAJm5Tf1B6G7t",
  "img": "systems/teriock/assets/equipment.svg",
  "scope": "global",
  "command": "const equipmentPack = game.teriock.packs.equipment();\nconst equipmentFolders = equipmentPack.folders;\nconst assignedProperties = [\"Magelore\", \"Master Crafted\", \"Runic\", \"Silver\"];\n\nfunction generateCombinations(arr) {\n  const results = [];\n  for (let len = 1; len <= arr.length; len++) {\n    const combine = (prefix, rest, depth) => {\n      if (depth === 0) { results.push(prefix); return; }\n      for (let i = 0; i < rest.length; i++) combine([...prefix, rest[i]], rest.slice(i + 1), depth - 1);\n    };\n    combine([], arr, len);\n  }\n  return results;\n}\n\nconst propertyMap = { \"Basic Equipment\": [] };\n\nconst progress = ui.notifications.info(`Pulling equipment from wiki.`, { progress: true });\nlet pct = 0;\n\nconst combinations = generateCombinations(assignedProperties);\ncombinations.sort((a, b) => (a.length !== b.length ? a.length - b.length : a.join(\" \").localeCompare(b.join(\" \"))));\nfor (const combo of combinations) propertyMap[combo.join(\" \") + \" Equipment\"] = combo;\n\nconst limiter = (limit) => {\n  let active = 0, queue = [];\n  const next = () => {\n    if (!queue.length || active >= limit) return;\n    active++;\n    const { fn, resolve, reject } = queue.shift();\n    Promise.resolve(fn()).then(resolve, reject).finally(() => { active--; next(); });\n  };\n  return (fn) => new Promise((resolve, reject) => { queue.push({ fn, resolve, reject }); next(); });\n};\n\nconst TeriockItem = CONFIG.Item.documentClass;\nconst equipmentTypes = Object.values(CONFIG.TERIOCK.equipmentType);\nconst totalJobs = equipmentTypes.length * Object.keys(propertyMap).length;\nlet completed = 0;\n\nconst folders = Object.fromEntries(await Promise.all(\n  Object.entries(propertyMap).map(async ([folderName, properties]) => {\n    ui.notifications.warn(folderName);\n    let folder = equipmentFolders.getName(folderName);\n    if (!folder) {\n      folder = await CONFIG.Folder.documentClass.create({ name: folderName, type: \"Item\" }, { pack: \"teriock.equipment\" });\n    }\n    return [folderName, { id: folder.id, properties }];\n  })\n));\n\nconst limit = limiter(8);\nawait Promise.all(\n  Object.entries(folders).flatMap(([_, { id, properties }]) =>\n    equipmentTypes.map((eo) =>\n      limit(async () => {\n        const generatedName = `${properties.join(\" \")} ${eo}`.trim();\n\n        const matches = equipmentPack.index.filter((e) => e.name === generatedName);\n        await Promise.all(matches.map(async (m) => {\n          const entry = await foundry.utils.fromUuid(m.uuid);\n          if (entry) await entry.delete();\n        }));\n\n        const equipment = await TeriockItem.create(\n          { name: generatedName, type: \"equipment\", folder: id, system: { equipmentType: eo } },\n          { pack: \"teriock.equipment\" }\n        );\n        await equipment.system.wikiPull({ notify: false });\n\n        if (properties.length >= 1) {\n          for (const property of properties) {\n            if (!equipment.effectKeys?.property?.has(game.teriock.api.utils.toCamelCase(property))) {\n              await game.teriock.api.fetch.importProperty(equipment, property);\n            }\n          }\n          if (equipment.system.equipmentClasses.has(\"bodyParts\")) {\n            try { await equipment.delete(); } catch {}\n          }\n        }\n\n        completed++;\n        pct = completed / totalJobs;\n        progress.update({ pct, message: `Pulling ${generatedName} from wiki.` });\n      })\n    )\n  )\n);\n\nprogress.update({ pct: 1 });",
  "folder": "L08qIbjJoCwEaiEi",
  "sort": 50000,
  "ownership": {
    "default": 0,
    "IIjfAJm5Tf1B6G7t": 3
  },
  "flags": {},
  "_stats": {
    "compendiumSource": null,
    "duplicateSource": null,
    "exportSource": null,
    "coreVersion": "13.345",
    "systemId": "teriock",
    "systemVersion": "0.1.0",
    "createdTime": 1753132368604,
    "modifiedTime": 1756249260221,
    "lastModifiedBy": "qf5JYGZKzM588nE6"
  },
  "_key": "!macros!NccvZMMNyFS0braS"
}
