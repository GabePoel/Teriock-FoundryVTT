{
  "name": "Update Raw Abilities",
  "type": "script",
  "_id": "tdghrSTQaqPfwEQZ",
  "author": "IIjfAJm5Tf1B6G7t",
  "img": "systems/teriock/assets/ability.svg",
  "scope": "global",
  "command": "const essentialsPack = game.teriock.packs.essentials();\nconst essentialsFolders = essentialsPack.folders;\n\nconst rawAbilitiesFolderName = \"Raw Abilities\";\nlet rawAbilitiesFolder = essentialsFolders.getName(rawAbilitiesFolderName);\nif (!rawAbilitiesFolder) {\n  await Folder.create(\n    {\n      name: rawAbilitiesFolderName,\n      type: \"Item\",\n    },\n    {\n      pack: \"teriock.essentials\",\n    },\n  );\n}\n\nconst progress = ui.notifications.info(`Pulling all abilities from wiki.`, {\n  progress: true,\n});\n\nlet allAbilityPages =\n  await game.teriock.api.wiki.fetchCategoryMembers(\"Abilities\");\nallAbilityPages = allAbilityPages.filter((page) =>\n  page.title.includes(\"Ability:\"),\n);\n\n// Function to process a single ability\nasync function processAbility(abilityPage, index, total) {\n  const abilityName = abilityPage.title.split(\"Ability:\")[1];\n\n  let abilityItem = essentialsPack.index.find((e) => e.name === abilityName);\n  if (!abilityItem) {\n    abilityItem = await game.teriock.Item.create(\n      {\n        name: abilityName,\n        type: \"power\",\n        system: {\n          type: \"other\",\n          description: `This power is a wrapper for ${abilityName}.`,\n        },\n        folder: rawAbilitiesFolder.id,\n      },\n      { pack: \"teriock.essentials\" },\n    );\n  } else {\n    abilityItem = await foundry.utils.fromUuid(abilityItem.uuid);\n  }\n  \n  await abilityItem.setFlag(\"teriock\", \"abilityWrapper\", true);\n  await abilityItem.setFlag(\"teriock\", \"effectWrapper\", true);\n  let abilityEffect = abilityItem.abilities.find((a) => a.name === abilityName);\n\n  if (!abilityEffect) {\n    abilityEffect = await game.teriock.api.create.ability(\n      abilityItem,\n      abilityName,\n      { notify: false },\n    );\n  } else {\n    await abilityEffect.system.wikiPull({ notify: false });\n  }\n  \n  if (abilityItem.img !== abilityEffect.img) {\n    await abilityItem.update({ img: abilityEffect.img });\n  }\n\n  return { abilityName, success: true };\n}\n\n// Create array of promises for parallel processing\nconst abilityPromises = allAbilityPages.map((abilityPage, index) => \n  processAbility(abilityPage, index, allAbilityPages.length)\n);\n\n// Update progress to show processing has started\nprogress.update({ \n  pct: 0.1, \n  message: `Processing ${allAbilityPages.length} abilities in parallel...` \n});\n\n// Execute all ability processing in parallel\ntry {\n  const results = await Promise.all(abilityPromises);\n  \n  // Update progress to completion\n  progress.update({ \n    pct: 1, \n    message: `Successfully processed ${results.length} abilities.` \n  });\n  \n  console.log(`Completed processing ${results.length} abilities:`, \n    results.map(r => r.abilityName));\n    \n} catch (error) {\n  progress.update({ \n    pct: 1, \n    message: `Error occurred during processing: ${error.message}` \n  });\n  console.error(\"Error processing abilities:\", error);\n}",
  "folder": "L08qIbjJoCwEaiEi",
  "sort": 200000,
  "ownership": {
    "default": 0,
    "IIjfAJm5Tf1B6G7t": 3
  },
  "flags": {},
  "_stats": {
    "compendiumSource": null,
    "duplicateSource": null,
    "exportSource": null,
    "coreVersion": "13.345",
    "systemId": "teriock",
    "systemVersion": "0.1.0",
    "createdTime": 1753144516198,
    "modifiedTime": 1755751084799,
    "lastModifiedBy": "qf5JYGZKzM588nE6"
  },
  "_key": "!macros!tdghrSTQaqPfwEQZ"
}
