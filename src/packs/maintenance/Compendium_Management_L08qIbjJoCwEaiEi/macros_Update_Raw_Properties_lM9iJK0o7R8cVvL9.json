{
  "name": "Update Raw Properties",
  "type": "script",
  "_id": "lM9iJK0o7R8cVvL9",
  "author": "uxE8DDp7ujgsxtd2",
  "img": "systems/teriock/assets/property.svg",
  "scope": "global",
  "command": "const essentialsPack = game.teriock.packs.essentials();\nconst essentialsFolders = essentialsPack.folders;\n\nconst rawPropertiesFolderName = \"Raw Properties\";\nlet rawPropertiesFolder = essentialsFolders.getName(rawPropertiesFolderName);\nif (!rawPropertiesFolder) {\n  await Folder.create(\n    {\n      name: rawPropertiesFolderName,\n      type: \"Item\",\n    },\n    {\n      pack: \"teriock.essentials\",\n    },\n  );\n}\n\nconst progress = ui.notifications.info(`Pulling all properties from wiki.`, {\n  progress: true,\n});\n\nlet allPropertyPages =\n  await game.teriock.api.wiki.fetchCategoryMembers(\"Properties\");\nallPropertyPages = allPropertyPages.filter((page) =>\n  page.title.includes(\"Property:\"),\n);\n\n/**\n * Processes a single property\n * @param {Object} propertyPage - The property page object from wiki\n * @returns {Promise<Object>} Promise that resolves with processing result\n */\nasync function processProperty(propertyPage) {\n  const propertyName = propertyPage.title.split(\"Property:\")[1];\n\n  let propertyItem = essentialsPack.index.find((e) => e.name === propertyName);\n  if (!propertyItem) {\n    propertyItem = await game.teriock.Item.create(\n      {\n        name: propertyName,\n        type: \"equipment\",\n        system: {\n          type: \"other\",\n          description: `This equipment is a wrapper for ${propertyName}.`,\n        },\n        folder: rawPropertiesFolder.id,\n      },\n      { pack: \"teriock.essentials\" },\n    );\n  } else {\n    propertyItem = await foundry.utils.fromUuid(propertyItem.uuid);\n  }\n  \n  await propertyItem.setFlag(\"teriock\", \"propertyWrapper\", true);\n  await propertyItem.setFlag(\"teriock\", \"effectWrapper\", true);\n  let propertyEffect = propertyItem.properties.find(\n    (a) => a.name === propertyName,\n  );\n\n  if (!propertyEffect) {\n    propertyEffect = await game.teriock.api.create.property(\n      propertyItem,\n      propertyName,\n      { notify: false },\n    );\n  } else {\n    await propertyEffect.system.wikiPull({ notify: false });\n  }\n  \n  if (propertyItem.img !== propertyEffect.img) {\n    await propertyItem.update({ img: propertyEffect.img });\n  }\n\n  return { propertyName, success: true };\n}\n\n// Create array of promises for parallel processing\nconst propertyPromises = allPropertyPages.map(propertyPage => \n  processProperty(propertyPage)\n);\n\n// Update progress to show processing has started\nprogress.update({ \n  pct: 0.1, \n  message: `Processing ${allPropertyPages.length} properties in parallel...` \n});\n\n// Execute all property processing in parallel\ntry {\n  const results = await Promise.all(propertyPromises);\n  \n  // Update progress to completion\n  progress.update({ \n    pct: 1, \n    message: `Successfully processed ${results.length} properties.` \n  });\n  \n  console.log(`Completed processing ${results.length} properties:`, \n    results.map(r => r.propertyName));\n    \n} catch (error) {\n  progress.update({ \n    pct: 1, \n    message: `Error occurred during processing: ${error.message}` \n  });\n  console.error(\"Error processing properties:\", error);\n}",
  "folder": "L08qIbjJoCwEaiEi",
  "sort": -100000,
  "ownership": {
    "default": 0,
    "uxE8DDp7ujgsxtd2": 3
  },
  "flags": {},
  "_stats": {
    "compendiumSource": null,
    "duplicateSource": null,
    "exportSource": null,
    "coreVersion": "13.345",
    "systemId": "teriock",
    "systemVersion": "0.1.0",
    "createdTime": 1754457994527,
    "modifiedTime": 1755753122532,
    "lastModifiedBy": "qf5JYGZKzM588nE6"
  },
  "_key": "!macros!lM9iJK0o7R8cVvL9"
}
