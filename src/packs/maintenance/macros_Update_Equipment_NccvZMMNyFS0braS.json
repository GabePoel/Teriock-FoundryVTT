{
  "name": "Update Equipment",
  "type": "script",
  "_id": "NccvZMMNyFS0braS",
  "author": "IIjfAJm5Tf1B6G7t",
  "img": "modules/game-icons-net/whitetransparent/swords-emblem.svg",
  "scope": "global",
  "command": "const equipmentPack = /** @type {CompendiumCollection} */ game.packs.get(\"teriock.equipment\");\nconst equipmentFolders = /** @type {CompendiumCollection<Folder>} */ equipmentPack.folders;\n\n// Properties to combine\nconst assignedProperties = [\"Magelore\", \"Master Crafted\", \"Morganti\", \"Runic\", \"Silveel\", \"Silver\"];\n\n// Helper: Convert a string to camelCase\nconst toCamelCase = (str) => {\n  return str\n    .toLowerCase()\n    .replace(/(?:^\\w|[A-Z]|\\b\\w|\\s+)/g, (match, index) =>\n      index === 0 ? match.toLowerCase() : match.trim().toUpperCase(),\n    )\n    .replace(/\\s+/g, \"\");\n};\n\n// Helper: Generate combinations\nfunction generateCombinations(arr) {\n  const results = [];\n\n  for (let len = 1; len <= arr.length; len++) {\n    const combine = (prefix, rest, depth) => {\n      if (depth === 0) {\n        results.push(prefix);\n        return;\n      }\n      for (let i = 0; i < rest.length; i++) {\n        combine([...prefix, rest[i]], rest.slice(i + 1), depth - 1);\n      }\n    };\n    combine([], arr, len);\n  }\n\n  return results;\n}\n\n// Build propertyMap\nconst propertyMap = {\n  \"Basic Equipment\": [],\n};\n\n/** @type {object} */\nconst progress = ui.notifications.info(`Pulling equipment from wiki.`, { progress: true });\nlet pct = 0;\n\nconst combinations = generateCombinations(assignedProperties);\n\n// Sort combinations: by length, then alphabetically within same length\ncombinations.sort((a, b) => {\n  if (a.length !== b.length) return a.length - b.length;\n  return a.join(\" \").localeCompare(b.join(\" \"));\n});\n\n// Fill in the map\nfor (const combo of combinations) {\n  const name = combo.join(\" \") + \" Equipment\";\n  const camelProps = combo.map(toCamelCase);\n  propertyMap[name] = camelProps;\n}\n\n// Now generate items\nfor (const [folderName, properties] of Object.entries(propertyMap)) {\n  ui.notifications.warn(folderName);\n  let folder = /** @type {Folder} */ equipmentFolders.getName(folderName);\n  if (!folder) {\n    folder = await Folder.create(\n      {\n        name: folderName,\n        type: \"Item\",\n      },\n      {\n        pack: \"teriock.equipment\",\n      },\n    );\n  }\n\n  for (const [e, eo] of Object.entries(CONFIG.TERIOCK.equipment)) {\n    const generatedName =\n      properties.map((p) => assignedProperties.find((ap) => toCamelCase(ap) === p)).join(\" \") + \" \" + eo;\n\n    const matches = equipmentPack.index.filter((e) => e.name === generatedName);\n    console.log(matches);\n    for (const match of matches) {\n      const entry = await foundry.utils.fromUuid(match.uuid);\n      await entry.delete();\n    }\n\n    const itemData = {\n      name: generatedName,\n      type: \"equipment\",\n      folder: folder.id,\n      system: {\n        equipmentType: eo,\n      },\n    };\n\n    pct += 1 / (Object.keys(CONFIG.TERIOCK.equipment).length * Object.keys(propertyMap).length);\n    progress.update({ pct: pct, message: `Pulling ${generatedName} from wiki.` });\n\n    const TeriockItem = CONFIG.Item.documentClass;\n    /** @type {TeriockEquipment} */\n    // const equipment = await TeriockItem.create(itemData, {\n    //   pack: \"teriock.equipment\",\n    // });\n    // await equipment.system.wikiPull({\n    //   notify: false,\n    // });\n    //\n    // console.log(properties);\n    //\n    // if (properties.length >= 1) {\n    //   for (const property of properties) {\n    //     if (!equipment.effectKeys?.property?.has(property)) {\n    //       await equipment.system.addProperty(property);\n    //     }\n    //   }\n    //   if (equipment.system.equipmentClasses.has(\"bodyParts\")) {\n    //     try {\n    //       await equipment.delete();\n    //     } catch {}\n    //   }\n    // }\n  }\n}",
  "folder": null,
  "sort": 0,
  "ownership": {
    "default": 0,
    "IIjfAJm5Tf1B6G7t": 3
  },
  "flags": {},
  "_stats": {
    "compendiumSource": null,
    "duplicateSource": null,
    "exportSource": null,
    "coreVersion": "13.345",
    "systemId": "teriock",
    "systemVersion": "0.1.0",
    "createdTime": 1753132368604,
    "modifiedTime": 1753134923463,
    "lastModifiedBy": "IIjfAJm5Tf1B6G7t"
  },
  "_key": "!macros!NccvZMMNyFS0braS"
}
