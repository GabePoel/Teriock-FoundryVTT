import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// REAL file path on disk
const actualDir = path.resolve(__dirname, "..", "src", "templates");

// FOUNDY VTT virtual path (used in loadTemplates)
const virtualBase = "systems/teriock/src/templates";

const outputFile = path.resolve(
  __dirname,
  "..",
  "src",
  "module",
  "helpers",
  "startup",
  "register-templates.mjs",
);

function getHandlebarsFiles(dir, fileList = []) {
  if (!fs.existsSync(dir)) {
    console.error(`Directory not found: ${dir}`);
    process.exit(1);
  }

  const files = fs.readdirSync(dir);

  for (const file of files) {
    const fullPath = path.join(dir, file);
    const stat = fs.statSync(fullPath);

    if (stat.isDirectory()) {
      getHandlebarsFiles(fullPath, fileList);
    } else if (file.endsWith(".hbs")) {
      const relativePath = path
        .relative(actualDir, fullPath)
        .replace(/\\/g, "/");
      const virtualPath = `${virtualBase}/${relativePath}`;
      fileList.push(`'${virtualPath}'`);
    }
  }

  return fileList;
}

function generateTemplatePreloadFunction(templatePaths) {
  return `// This file is auto-generated by scripts/update-templates.mjs. Do not edit manually.

export default async function registerTemplates () {
  return foundry.applications.handlebars.loadTemplates([
    ${templatePaths.join(",\n    ")}
  ]);
};\n`;
}

function main() {
  console.log(`Scanning directory: ${actualDir}`);
  const templatePaths = getHandlebarsFiles(actualDir);
  const outputContent = generateTemplatePreloadFunction(templatePaths);

  fs.writeFileSync(outputFile, outputContent, "utf8");
  console.log(`templates.mjs updated with ${templatePaths.length} templates.`);
}

main();
